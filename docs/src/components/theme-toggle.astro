---
export interface Props {
  id: string;
}

const { id } = Astro.props;
---

<button
  class={`${
    id === "theme-toggle-navigation" ? "hidden md:flex" : "flex md:hidden"
  } w-fit gap-1 rounded-full border-2 border-code-grey dark:border-code-light-grey py-1 px-2 dark:bg-code-light-blue`}
  name={id}
>
  <label class="text-code-grey dark:invisible">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-4 w-4 fill-current stroke-current stroke-2"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
      ></path>
    </svg>
  </label>
  <label class="text-code-light-grey invisible dark:visible">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-4 w-4 fill-current stroke-current"
      viewBox="0 0 20 20"
    >
      <path
        d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
      ></path>
    </svg>
  </label>
</button>

<script define:vars={{ id }}>
  const html = document.documentElement;

  const themeToggle = document.querySelector(`[name="${id}"]`);

  const toggleTheme = (t) => {
    localStorage.setItem("theme", t);
    html.classList.add(t === "dark" ? "dark" : "light");
    html.classList.remove(t === "dark" ? "light" : "dark");
  };

  themeToggle.addEventListener("click", () => {
    toggleTheme(html.classList.contains("dark") ? "light" : "dark");
  });
</script>
