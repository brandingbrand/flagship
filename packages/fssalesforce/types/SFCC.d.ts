
/* tslint:disable */

/**
 * Auto-generated Salesforce Commerce Cloud Open Commerce API response types for v18.3
 */

// DO NOT EDIT THIS FILE - See fssalesforce/scripts/README.md for more info

declare namespace SFCC {
    /**
     * Document representing a note to an object.
     */
    export interface ApproachingDiscount {
        /**
         * The total amount needed to receive the discount.
         */
        condition_threshold?: number; // double
        /**
         * The discount the customer can receive if eligible.
         */
        discount?: Discount;
        /**
         * The amount the customer basket contributes towards the purchase condition.
         */
        merchandise_total?: number; // double
        /**
         * The link to details of the promotion associated with this discount.
         */
        promotion_link?: PromotionLink;
        /**
         * The unique id of the shipment the discount relates to.
         */
        shipment_id?: string;
        /**
         * The shipping methods the promotion relates to.
         */
        shipping_methods?: ShippingMethod[];
        /**
         * The type of the approaching discount ("order" or "shipping").
         */
        type?: string;
    }
    /**
     * A result of a approaching discount request.
     */
    export interface ApproachingDiscountResult {
        /**
         * Lists approaching discounts.
         */
        approaching_discounts?: ApproachingDiscount[];
    }
    /**
     * Document representing the authentication request type.
     */
    export interface AuthRequest {
        /**
         * Type of authentication request: guest, login (credentials), refresh or session.
         */
        type: "guest" | "credentials" | "refresh" | "session";
    }
    /**
     * Document representing a basket.
     *  
     */
    export interface Basket {
        /**
         * The products tax after discounts applying in purchase currency.
         * 
         *  Adjusted merchandize prices represent the sum of product prices before
         *  services such as shipping have been added, but after adjustment from
         *  promotions have been added.
         */
        adjusted_merchandize_total_tax?: number; // double
        /**
         * The tax of all shipping line items of the line item container after
         *  shipping adjustments have been applied.
         */
        adjusted_shipping_total_tax?: number; // double
        /**
         * Is the basket created by an agent?
         */
        agent_basket?: boolean;
        /**
         * The unique identifier for the basket.
         */
        basket_id?: string;
        /**
         * The billing address. This property is part of basket checkout information only.
         */
        billing_address?: OrderAddress;
        /**
         * The bonus discount line items of the line item container.
         */
        bonus_discount_line_items?: BonusDiscountLineItem[];
        /**
         * The sales channel for the order.
         */
        channel_type?: "storefront" | "callcenter" | "marketplace" | "dss" | "store" | "pinterest" | "twitter" | "facebookads" | "subscriptions" | "onlinereservation" | "customerservicecenter" | "instagramcommerce";
        /**
         * The sorted array of coupon items. This array can be empty.
         */
        coupon_items?: CouponItem[];
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The ISO 4217 mnemonic code of the currency.
         */
        currency?: string;
        /**
         * The customer information for logged in customers. This property is part of basket checkout information only.
         */
        customer_info?: CustomerInfo;
        /**
         * The sorted array of gift certificate line items. This array can be empty.
         */
        gift_certificate_items?: GiftCertificateItem[];
        /**
         * 
         */
        inventory_reservation_expiry?: string; // date-time
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The products total tax in purchase currency.
         * 
         *  Merchandize total prices represent the sum of product prices before
         *  services such as shipping or adjustment from promotions have
         *  been added.
         */
        merchandize_total_tax?: number; // double
        /**
         * The notes for the line item container.
         */
        notes?: SimpleLink;
        /**
         * The array of order level price adjustments. This array can be empty.
         */
        order_price_adjustments?: PriceAdjustment[];
        /**
         * The total price of the order, including products, shipping and tax. This property is part of basket checkout
         *  information only.
         */
        order_total?: number; // double
        /**
         * The payment instruments list for the order.
         */
        payment_instruments?: OrderPaymentInstrument[];
        /**
         * The sorted array of product items (up to a maximum of 50 items). This array can be empty.
         */
        product_items?: ProductItem[];
        /**
         * The total price of all product items after all product discounts.
         *  Depending on taxation policy the returned price is net or gross.
         */
        product_sub_total?: number; // double
        /**
         * The total price of all product items after all product and order discounts.
         *  Depending on taxation policy the returned price is net or gross.
         */
        product_total?: number; // double
        /**
         * The array of shipments. This property is part of basket checkout information only.
         */
        shipments?: Shipment[];
        /**
         * The sorted array of shipping items. This array can be empty.
         */
        shipping_items?: ShippingItem[];
        /**
         * The total shipping price of the order after all shipping discounts. Excludes tax if taxation policy is net. Includes
         *  tax if taxation policy is gross. This property is part of basket checkout information only.
         */
        shipping_total?: number; // double
        /**
         * The tax of all shipping line items of the line item container before
         *  shipping adjustments have been applied.
         */
        shipping_total_tax?: number; // double
        /**
         * Gets the source code assigned to this basket.
         */
        source_code?: string;
        /**
         * The total tax amount of the order. This property is part of basket checkout information only.
         */
        tax_total?: number; // double
        /**
         * The taxation the line item container is based on.
         */
        taxation?: "gross" | "net";
    }
    /**
     * Document representing a basket payment instrument request.
     */
    export interface BasketPaymentInstrumentRequest {
        /**
         * The payment transaction amount.
         */
        amount?: number; // double
        /**
         * The bank routing number.
         */
        bank_routing_number?: string;
        /**
         * The id of a customer payment instrument.
         */
        customer_payment_instrument_id?: string;
        /**
         * The gift certificate code.
         */
        gift_certificate_code?: string;
        /**
         * The payment bank account request data.
         */
        payment_bank_account?: PaymentBankAccountRequest;
        /**
         * The payment card.
         */
        payment_card?: OrderPaymentCardRequest;
        /**
         * The payment method id. Optional if a customer payment instrument id is specified.
         */
        payment_method_id?: string;
    }
    /**
     * Reference to a basket.
     */
    export interface BasketReference {
        /**
         * The unique identifier for the basket.
         */
        basket_id: string;
        /**
         * The unique identifier for the customer.
         */
        customer_id: string;
    }
    /**
     * Result document containing an array of baskets.
     */
    export interface BasketsResult {
        /**
         * The list of baskets for a customer.
         */
        baskets?: Basket[];
        /**
         * The total number of baskets.
         */
        total?: number; // int32
    }
    /**
     * Document representing a bonus discount line item
     */
    export interface BonusDiscountLineItem {
        /**
         * The list of links to the bonus products the customer can choose from.
         */
        bonus_products?: ProductDetailsLink[];
        /**
         * The coupon code that triggered the promotion, if applicable.
         */
        coupon_code?: string;
        /**
         * The ID of the line item.
         */
        id?: string;
        /**
         * The maximum number of bonus items the user can select for this promotion.
         */
        max_bonus_items?: number; // int32
        /**
         * The ID of the promotion which triggered the creation of the line item.
         */
        promotion_id?: string;
    }
    /**
     * Document representing a boolean filter.
     *  
     */
    export interface BoolFilter {
        /**
         * A list of filters, which are logically combined by an operator.
         */
        filters?: Filter[];
        /**
         * The logical operator the filters are combined with.
         */
        operator: "and" | "or" | "not";
    }
    /**
     * A boolean query allows to construct full logical expression trees consisting of other queries (usually term and text
     * queries). A boolean query basically has 3 sets of clauses that 'must', 'should' and / or 'must not' match.  If 'must',
     * 'must_not', or 'should' appear in the same boolean query, they are combined logically using the AND operator.
     * 
     */
    export interface BoolQuery {
        /**
         * List of queries, which must match.
         */
        must?: Query[];
        /**
         * List of queries, which must not match.
         */
        must_not?: Query[];
        /**
         * List of queries, which should match.
         */
        should?: Query[];
    }
    /**
     * Document representing a bundled product within a product bundle.
     */
    export interface BundledProduct {
        id?: string;
        /**
         * The product being bundled.
         */
        product?: Product;
        /**
         * For the product being bundled, the quantity added to the bundle.
         */
        quantity?: number; // double
    }
    /**
     * Document representing a category.
     */
    export interface Category {
        /**
         * Array of subcategories. Can be empty.
         */
        categories?: Category[];
        /**
         * The localized description of the category.
         */
        description?: string;
        /**
         * The id of the category.
         */
        id: string;
        /**
         * The URL to the category image.
         */
        image?: string;
        /**
         * The localized name of the category.
         */
        name?: string;
        /**
         * The localized page description of the category.
         */
        page_description?: string;
        /**
         * The localized page keywords of the category.
         */
        page_keywords?: string;
        /**
         * The localized page title of the category.
         */
        page_title?: string;
        /**
         * The id of the parent category.
         */
        parent_category_id?: string;
        /**
         * The URL to the category thumbnail.
         */
        thumbnail?: string;
    }
    /**
     * Result document containing an array of categories.
     */
    export interface CategoryResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of category documents.
         */
        data?: Category[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a content asset.
     */
    export interface Content {
        /**
         * The localized content asset description.
         */
        description?: string;
        /**
         * The id of the content asset.
         */
        id: string;
        /**
         * The localized content asset name.
         */
        name?: string;
        /**
         * The localized content asset page description.
         */
        page_description?: string;
        /**
         * The localized content asset page description.
         */
        page_keywords?: string;
        /**
         * The localized content asset page title.
         */
        page_title?: string;
    }
    /**
     * Document representing a content folder.
     */
    export interface ContentFolder {
        /**
         * The localized content folder description.
         */
        description?: string;
        /**
         * The array of content subfolders. This array can be empty.
         */
        folders?: ContentFolder[];
        /**
         * The id of the content folder.
         */
        id: string;
        /**
         * The localized content folder name.
         */
        name?: string;
        /**
         * The localized content folder page description.
         */
        page_description?: string;
        /**
         * The localized content folder page description.
         */
        page_keywords?: string;
        /**
         * The localized content folder page title.
         */
        page_title?: string;
        /**
         * The id of the parent content folder.
         */
        parent_folder_id?: string;
    }
    /**
     * Result document containing an array of content folders.
     */
    export interface ContentFolderResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of content folder documents.
         */
        data?: ContentFolder[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Result document containing an array of content assets.
     */
    export interface ContentResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of content assets.
         */
        data?: Content[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a search refinement attribute.
     */
    export interface ContentSearchRefinement {
        /**
         * The id of the search refinement attribute. In the case of an attribute refinement, this is the
         *  attribute id. Custom attributes are marked by the prefix "c_".
         */
        attribute_id: string;
        /**
         * The localized label of the refinement.
         */
        label?: string;
        /**
         * The sorted array of refinement values. The array can be empty.
         */
        values?: ContentSearchRefinementValue[];
    }
    /**
     * Document representing a search refinement value.
     */
    export interface ContentSearchRefinementValue {
        /**
         * The localized description of the refinement value.
         */
        description?: string;
        /**
         * The number of search hits (0 or more) when selecting the refinement value.
         */
        hit_count?: number; // int32
        /**
         * The localized label of the refinement value.
         */
        label?: string;
        /**
         * The optional presentation id associated with the refinement value.
         *  The presentation id can be used, for example, to associate an id with
         *  an HTML widget.
         */
        presentation_id?: string;
        /**
         * The refinement value. In the case of an attribute refinement, this is the bucket,
         *  the attribute value, or a value range. In the case of a content folder refinement,
         *  this is the folder id.
         */
        value?: string;
        /**
         * The array of hierarchical refinement values. This array can be empty.
         */
        values?: ContentSearchRefinementValue[];
    }
    /**
     * Document representing a content search result.
     */
    export interface ContentSearchResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        data?: {
        }[];
        /**
         * The sorted array of search hits. Can be empty.
         */
        hits?: Content[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * The query String that was searched for.
         */
        query?: string;
        /**
         * The sorted array of search refinements. Can be empty.
         */
        refinements?: ContentSearchRefinement[];
        /**
         * Map of selected refinement attribute id/value(s) pairs. The sorting order is the same like in request URL.
         */
        selected_refinements?: {
            [name: string]: string;
        };
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a coupon item.
     */
    export interface CouponItem {
        /**
         * The coupon code.
         */
        code: string;
        /**
         * The coupon item id.
         */
        coupon_item_id?: string;
        /**
         * The status of the coupon item.
         */
        status_code?: "coupon_code_already_in_basket" | "coupon_code_already_redeemed" | "coupon_code_unknown" | "coupon_disabled" | "redemption_limit_exceeded" | "customer_redemption_limit_exceeded" | "timeframe_redemption_limit_exceeded" | "no_active_promotion" | "coupon_already_in_basket" | "no_applicable_promotion" | "applied" | "adhoc";
        /**
         * A flag indicating whether the coupon item is valid. A coupon line item is valid if
         *  the status code is 'applied' or 'no_applicable_promotion'.
         */
        valid?: boolean;
    }
    /**
     * Document representing a custom object that contains all defined custom attributes for its
     *  object type.
     */
    export interface CustomObject {
        /**
         * The name of the key property for the custom object.
         */
        key_property?: string;
        /**
         * The id of the custom object when the type of the key is Integer.
         */
        key_value_integer?: number; // int32
        /**
         * The id of the custom object when the type of the key is String.
         */
        key_value_string?: string;
        /**
         * The id of the object type.
         */
        object_type?: string;
    }
    /**
     * Document representing a customer.
     */
    export interface Customer {
        /**
         * The customer's addresses.
         */
        addresses?: CustomerAddress[];
        /**
         * The customer's authorization type (indicates if the customer is a guest
         *  or a registered customer).
         */
        auth_type?: "guest" | "registered";
        /**
         * The customer's birthday.
         */
        birthday?: string; // date
        /**
         * The customer's company name.
         */
        company_name?: string;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The customer's number (id). Both registered and guest customers have a
         *  customer id.
         */
        customer_id?: string;
        /**
         * The customer's number (id). Only a registered customer has a customer
         *  number.
         */
        customer_no: string;
        /**
         * The customer's email address.
         */
        email?: string; // email
        /**
         * A flag indicating whether this customer is is enabled and can log in.
         */
        enabled?: boolean;
        /**
         * The customer's fax number. The length is restricted to 32 characters.
         */
        fax?: string;
        /**
         * The customer's first name.
         */
        first_name?: string;
        /**
         * The customer's gender.
         */
        gender?: 1 | 2; // int32
        /**
         * The customer's job title.
         */
        job_title?: string;
        /**
         * The time when the customer last logged in.
         */
        last_login_time?: string; // date-time
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The customer's last name.
         */
        last_name: string;
        /**
         * The time when the customer last visited.
         */
        last_visit_time?: string; // date-time
        /**
         * The customer's login.
         */
        login?: string;
        /**
         * The customer's note.
         */
        note?: string;
        /**
         * The customer's payment instruments.
         */
        payment_instruments?: CustomerPaymentInstrument[];
        /**
         * The customer's business phone number.
         */
        phone_business?: string;
        /**
         * The customer's home phone number.
         */
        phone_home?: string;
        /**
         * The customer's mobile phone number.
         */
        phone_mobile?: string;
        /**
         * The customer's preferred locale.
         */
        preferred_locale?: string;
        /**
         * The time when the customer logged in previously.
         */
        previous_login_time?: string; // date-time
        /**
         * The time when the customer last visited the store.
         */
        previous_visit_time?: string; // date-time
        /**
         * The salutation to use for the customer.
         */
        salutation?: string;
        /**
         * The customer's second name.
         */
        second_name?: string;
        /**
         * The customer's suffix (for example, "Jr." or "Sr.").
         */
        suffix?: string;
        /**
         * The customer's title (for example, "Mrs" or "Mr").
         */
        title?: string;
    }
    /**
     * Document representing a customer address.
     */
    export interface CustomerAddress {
        /**
         * The first address.
         */
        address1?: string;
        /**
         * The second address.
         */
        address2?: string;
        /**
         * The id of the address as specified by account owner.
         */
        address_id: string;
        /**
         * The city.
         */
        city?: string;
        /**
         * The company name.
         */
        company_name?: string;
        /**
         * The two-letter ISO 3166-1 (Alpha-2) country code.
         */
        country_code: string;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The first name.
         */
        first_name?: string;
        /**
         * The full name.
         */
        full_name?: string;
        /**
         * The job title.
         */
        job_title?: string;
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The last name.
         */
        last_name: string;
        /**
         * The phone number.
         */
        phone?: string;
        /**
         * The post box.
         */
        post_box?: string;
        /**
         * The postal code.
         */
        postal_code?: string;
        /**
         * The preferred attribute.
         */
        preferred?: boolean;
        /**
         * The salutation.
         */
        salutation?: string;
        /**
         * The second name.
         */
        second_name?: string;
        /**
         * The state code.
         */
        state_code?: string;
        /**
         * The suffix.
         */
        suffix?: string;
        /**
         * The suite.
         */
        suite?: string;
        /**
         * The title.
         */
        title?: string;
    }
    /**
     * * Result document of product list addresses.
     */
    export interface CustomerAddressLink {
        /**
         * The id of the address.
         */
        address_id?: string;
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The link title.
         */
        title?: string;
    }
    /**
     * Result document containing an array of customer addresses.
     */
    export interface CustomerAddressResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of customer address documents.
         */
        data?: CustomerAddress[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * 
         */
        select?: string;
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing information used to identify a customer.
     */
    export interface CustomerInfo {
        /**
         * The customer's number (id).
         */
        customer_id?: string;
        /**
         * 
         */
        customer_name?: string;
        /**
         * The customer's number (id).
         */
        customer_no: string;
        /**
         * The customer's email address.
         */
        email: string; // email
    }
    /**
     * Result document containing an array of customer orders.
     */
    export interface CustomerOrderResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of customer order documents.
         */
        data?: Order[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * The fields that you want to select.
         */
        select?: string;
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a customer payment card request.
     */
    export interface CustomerPaymentCardRequest {
        /**
         * The payment card type (for example, 'Visa').
         */
        card_type?: string;
        /**
         * A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data at the
         *  token store.
         */
        credit_card_token?: string;
        /**
         * The month when the payment card expires.
         */
        expiration_month?: number; // int32
        /**
         * The year when the payment card expires.
         */
        expiration_year?: number; // int32
        /**
         * The payment card holder.
         */
        holder?: string;
        /**
         * The payment card issue number.
         */
        issue_number?: string;
        /**
         * The payment card number.
         */
        number?: string;
        /**
         * The payment card valid from month.
         */
        valid_from_month?: number; // int32
        /**
         * The payment card valid from year.
         */
        valid_from_year?: number; // int32
    }
    /**
     * Document representing a customer payment instrument.
     */
    export interface CustomerPaymentInstrument {
        /**
         * The bank routing number.
         */
        bank_routing_number?: string;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The masked gift certificate code.
         */
        masked_gift_certificate_code?: string;
        /**
         * The payment bank account.
         */
        payment_bank_account?: PaymentBankAccount;
        /**
         * The payment card.
         */
        payment_card?: PaymentCard;
        /**
         * The payment instrument ID.
         */
        payment_instrument_id?: string;
        /**
         * The payment method id. Optional if a customer payment instrument id is specified.
         */
        payment_method_id?: string;
    }
    /**
     * Document representing a customer payment instrument request.
     */
    export interface CustomerPaymentInstrumentRequest {
        /**
         * The bank routing number.
         */
        bank_routing_number?: string;
        /**
         * The gift certificate code.
         */
        gift_certificate_code?: string;
        /**
         * The payment bank account request data.
         */
        payment_bank_account?: PaymentBankAccountRequest;
        /**
         * The customer payment card.
         */
        payment_card?: CustomerPaymentCardRequest;
        /**
         * The payment method id. Optional if a customer payment instrument id is specified.
         */
        payment_method_id?: string;
    }
    /**
     * Document representing a customer payment instrument result. The payment data contained is masked where needed for security purposes.
     */
    export interface CustomerPaymentInstrumentResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The customer payment instruments list.
         */
        data?: CustomerPaymentInstrument[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a customer product List.
     */
    export interface CustomerProductList {
        /**
         * The coRegistrant of this product list.
         */
        co_registrant?: CustomerProductListRegistrant;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The resource link to the current shipping address of this customer product list.
         */
        current_shipping_address_link?: CustomerAddressLink;
        /**
         * The list of customer product list items.
         */
        customer_product_list_items?: CustomerProductListItem[];
        /**
         * The description of this product list.
         */
        description?: string;
        /**
         * The event of this product list.
         */
        event?: ProductListEvent;
        /**
         * The id of this product list.
         */
        id?: string;
        /**
         * The resource link to the items of this customer product list.
         */
        items_link?: CustomerProductListItemLink;
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The name of this product list.
         */
        name?: string;
        /**
         * The resource link to the post event shipping address of this customer product list.
         */
        post_event_shipping_address_link?: CustomerAddressLink;
        /**
         * The abbreviated shipping address of this product list representing what anonymous user can see.
         */
        product_list_shipping_address?: ProductListShippingAddress;
        /**
         * Indicates whether the owner made this product list available for access by other customers.
         */
        public?: boolean;
        /**
         * The registrant of this product list.
         */
        registrant?: CustomerProductListRegistrant;
        /**
         * The resource link to the shipping address of this customer product list.
         */
        shipping_address_link?: CustomerAddressLink;
        /**
         * The type of the product list.
         */
        type?: "wish_list" | "gift_registry" | "shopping_list" | "custom_1" | "custom_2" | "custom_3";
    }
    /**
     * Document representing a customer product list item.
     */
    export interface CustomerProductListItem {
        /**
         * The id of this product list item.
         */
        id?: string;
        /**
         * The priority of the item.
         */
        priority?: number; // int32
        /**
         * The product item
         */
        product?: Product;
        /**
         * A link to the product.
         */
        product_details_link?: ProductSimpleLink;
        /**
         * The id of the product.
         */
        product_id?: string;
        /**
         * Is this product list item available for access by other customers?
         */
        public?: boolean;
        /**
         * The quantity of products already purchased.
         */
        purchased_quantity?: number; // double
        /**
         * The quantity of this product list item.
         */
        quantity?: number; // double
        /**
         * The type of the item.
         */
        type?: "product" | "gift_certificate";
    }
    /**
     * Document representing a customer product list item link.
     */
    export interface CustomerProductListItemLink {
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The link title.
         */
        title?: string;
    }
    /**
     * Document representing a customer product list item purchase.
     */
    export interface CustomerProductListItemPurchase {
        /**
         * The id of this purchase.
         */
        id?: string;
        /**
         * The order number of this purchase.
         */
        order_no?: string;
        /**
         * The id of the product list item this purchase relates to.
         */
        product_list_item_id?: string;
        /**
         * The name of the purchaser.
         */
        purchaser_name?: string;
        /**
         * The quantity of this product list item purchased.
         */
        quantity?: number; // double
    }
    /**
     * Document representing a customer product list purchases result.
     */
    export interface CustomerProductListItemPurchaseResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The customer product list item purchases.
         */
        data?: CustomerProductListItemPurchase[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a customer product list items result.
     */
    export interface CustomerProductListItemResult {
        count?: number; // int32
        /**
         * The customer product list items.
         */
        data?: CustomerProductListItem[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        total?: number; // int32
    }
    /**
     * Document representing a customer product list registrant.
     */
    export interface CustomerProductListRegistrant {
        /**
         * The email of the registrant.
         */
        email?: string;
        /**
         * The first name of the registrant.
         */
        first_name?: string;
        /**
         * The last name of the registrant.
         */
        last_name?: string;
        /**
         * The role of the registrant.
         */
        role?: string;
    }
    /**
     * Document representing a customer product lists result.
     */
    export interface CustomerProductListResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The customer product lists.
         */
        data?: CustomerProductList[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing the registration information for a customer.
     */
    export interface CustomerRegistration {
        /**
         * The customer registration information.
         *  The mandatory properties for registration are login, last name and email.
         */
        customer: Customer;
        /**
         * The password to authorize.
         */
        password?: string;
    }
    /**
     * Document representing a discount that was 
     */
    export interface Discount {
        /**
         * The amount that is used with the amount and fixed price types.
         */
        amount?: number; // double
        /**
         * The percentage that is used with percentage types.
         */
        percentage?: number; // double
        /**
         * The price book id that is used with some types.
         */
        price_book_id?: string;
        /**
         * The type of discount.
         */
        type: "percentage" | "fixed_price" | "amount" | "free" | "price_book_price" | "bonus" | "total_fixed_price" | "bonus_choice" | "percentage_off_options";
    }
    /**
     * Document representing a discount to be applied to a custom price adjustment. The properties 
     */
    export interface DiscountRequest {
        /**
         * The type of discount.
         */
        type: "percentage" | "fixed_price" | "amount";
        /**
         * The amount of the discount.
         */
        value: number; // double
    }
    /**
     * Document representing a filter.
     *  
     */
    export type Filter = any;
    /**
     * A filtered query allows to filter the result of a (possibly complex) query using a (possibly complex) filter.
     *  
     */
    export interface FilteredQuery {
        /**
         * The (possibly complex) filter object.
         */
        filter: Filter;
        /**
         * The query object.
         */
        query: Query;
    }
    /**
     * Document representing a gift certificate.
     */
    export interface GiftCertificate {
        /**
         * The gift certificate original amount.
         */
        amount?: number; // double
        /**
         * The gift certificate balance.
         */
        balance?: number; // double
        /**
         * The gift certificate description.
         */
        description?: string;
        /**
         * Is the gift certificate is enabled?
         */
        enabled?: boolean;
        /**
         * The masked gift certificate code.
         */
        masked_gift_certificate_code?: string;
        /**
         * The merchant ID.
         */
        merchant_id?: string;
        /**
         * The message.
         */
        message?: string;
        /**
         * The recipient email.
         */
        recipient_email?: string;
        /**
         * The recipient name.
         */
        recipient_name?: string;
        /**
         * The sender name.
         */
        sender_name?: string;
        /**
         * The gift certificate status.
         */
        status?: "pending" | "issued" | "partially_redeemed" | "redeemed";
    }
    /**
     * A gift certificate item.
     */
    export interface GiftCertificateItem {
        /**
         * The certificate item amount.
         */
        amount: number; // double
        /**
         * Id used to identify this item
         */
        gift_certificate_item_id?: string;
        /**
         * The certificate's message.
         */
        message?: string;
        /**
         * The recipient's email.
         */
        recipient_email: string;
        /**
         * The recipient's name.
         */
        recipient_name?: string;
        /**
         * The sender's name.
         */
        sender_name?: string;
        /**
         * The shipment id.
         */
        shipment_id?: string;
    }
    /**
     * Document representing a gift certificate request data.
     */
    export interface GiftCertificateRequest {
        /**
         * The gift certificate code.
         */
        gift_certificate_code?: string;
    }
    export interface Image {
        alt?: string;
        dis_base_link?: string;
        link: string;
        title?: string;
    }
    /**
     * Document representing an image group containing a list of images for a particular view type and an optional variation value.
     */
    export interface ImageGroup {
        /**
         * The images of the image group.
         */
        images?: Image[];
        /**
         * Returns a list of variation attributes applying to this image group.
         */
        variation_attributes?: VariationAttribute[];
        /**
         * The image view type.
         */
        view_type?: string;
    }
    /**
     * Document representing inventory information of the current product for a particular inventory list.
     */
    export interface Inventory {
        /**
         * The ats of the product. If it is infinity, the return value is 999999. The value can be overwritten by the
         *  OCAPI setting 'product.inventory.ats.max_threshold'.
         */
        ats?: number; // double
        /**
         * A flag indicating whether the product is back orderable.
         */
        backorderable?: boolean;
        /**
         * The inventory id.
         */
        id: string;
        /**
         * A flag indicating the date when the product will be in stock.
         */
        in_stock_date?: string; // date-time
        /**
         * A flag indicating whether at least one of products is available to sell.
         */
        orderable?: boolean;
        /**
         * A flag indicating whether the product is pre orderable.
         */
        preorderable?: boolean;
        /**
         * The stock level of the product. If it is infinity, the return value is 999999. The value can be overwritten by the
         *  OCAPI setting 'product.inventory.stock_level.max_threshold'.
         */
        stock_level?: number; // double
    }
    /**
     * Document that describes a single locale.
     */
    export interface Locale {
        /**
         * The country/region code for this Locale, which will
         *  either be the empty string or an upercase ISO 3166 2-letter code.
         */
        country?: string;
        /**
         * Flag that is true if the locale is the default one to use if an explicit locale is not specified.
         */
        default?: boolean;
        /**
         * The name for the Locale's country that is appropriate for
         *  display to the user, or an empty string if no country has been specified
         *  for the Locale.
         *  The display country is returned in the language defined for this locale,
         *  and not in the language of the session locale.
         */
        display_country?: string;
        /**
         * The name for the Locale's language that is appropriate for
         *  display to the user, or an empty string if no language has been specified
         *  for the Locale.
         *  The display language is returned in the language defined for this locale,
         *  and not in the language of the session locale.
         */
        display_language?: string;
        /**
         * The name for the Locale that is appropriate for
         *  display to the user, or an empty string if no display name has been
         *  specified for the Locale.
         *  The display name is returned in the language defined for this locale,
         *  and not in the language of the session locale.
         */
        display_name?: string;
        /**
         * The identifier of the Locale. Contains a combination of the
         *  language and the country key, concatenated by "-", e.g. "en-US". This
         *  attribute is the primary key of the class.
         */
        id?: string;
        /**
         * The three-letter abbreviation for this Locale's country, or an
         *  empty string if no country has been specified for the Locale.
         */
        iso3_country?: string;
        /**
         * The three-letter abbreviation for this Locale's language, or an
         *  empty string if no language has been specified for the
         *  Locale.
         */
        iso3_language?: string;
        /**
         * The language code for this Locale, which will either
         *  be the empty string or a lowercase ISO 639 code.
         */
        language?: string;
        /**
         * The display name of the Locale. This uses the current
         *  request locale to localize the value.
         */
        name?: string;
    }
    export interface Master {
        link: string;
        master_id: string;
        orderable?: boolean;
        price?: number; // double
        price_max?: number; // double
        prices?: {
            [name: string]: number; // double
        };
    }
    /**
     * A match all query simply matches all documents (namespace and document type). This query comes in
     *  handy if you just want to filter a search result or really do not have any constraints.
     * 
     *  
     */
    export type MatchAllQuery = any;
    /**
     * Nested query allows to query upon nested documents that are part of a larger document. The classical example is a
     *  product master with variants (in one big document) where you want to constraint a search to masters that have
     *  variants that match multiple constraints (like color = blue AND size = M).
     *  
     */
    export interface NestedQuery {
        /**
         * 
         */
        path: string;
        /**
         * 
         */
        query: Query;
        /**
         * 
         */
        score_mode?: "avg" | "total" | "max" | "none";
    }
    /**
     * Document representing a note to an object.
     */
    export interface Note {
        /**
         * The author of the note.
         */
        created_by?: string;
        /**
         * The creation date of the note.
         */
        creation_date?: string; // date-time
        /**
         * The ID of the note.
         */
        id?: string;
        /**
         * The note's subject.
         */
        subject?: string;
        /**
         * The note's text.
         */
        text?: string;
    }
    /**
     * A result of a note request.
     * 
     *  Contains notes for an object - for example, for a basket.
     */
    export interface NotesResult {
        /**
         * The notes for an object.
         */
        notes?: Note[];
    }
    /**
     * Document representing a product option.
     */
    export interface Option {
        /**
         * The localized description of the option.
         */
        description?: string;
        /**
         * The id of the option.
         */
        id: string;
        /**
         * The URL to the option image.
         */
        image?: string;
        /**
         * The localized name of the option.
         */
        name?: string;
        /**
         * The array of option values. This array can be empty.
         */
        values?: OptionValue[];
    }
    /**
     * Document representing an option item.
     */
    export interface OptionItem {
        /**
         * The tax of the product item after adjustments applying.
         */
        adjusted_tax?: number; // double
        /**
         * The base price for the line item, which is the
         *  price of the unit before applying adjustments, in the purchase
         *  currency. The base price may be net or gross of tax depending
         *  on the configured taxation policy.
         */
        base_price?: number; // double
        /**
         * The id of the bonus discount line item this bonus product relates to.
         */
        bonus_discount_line_item_id?: string;
        /**
         * A flag indicating whether the product item is a bonus.
         */
        bonus_product_line_item?: boolean;
        /**
         * The array of bundled product items. Can be empty.
         */
        bundled_product_items?: ProductItem[];
        /**
         * Returns true if the item is a gift.
         */
        gift?: boolean;
        /**
         * The gift message.
         */
        gift_message?: string;
        /**
         * The inventory list id associated with this item.
         */
        inventory_id?: string;
        /**
         * The item identifier. Use this to identify an item when updating the item quantity or creating a custom price
         *  adjustment for an item.
         */
        item_id?: string;
        /**
         * The text describing the item in more detail.
         */
        item_text?: string;
        /**
         * The id of the option.
         */
        option_id: string;
        /**
         * The array of option items. This array can be empty.
         */
        option_items?: OptionItem[];
        /**
         * The id of the option value.
         */
        option_value_id: string;
        /**
         * The price of the line item before applying any adjustments. If the line item is based on net pricing
         *  then the net price is returned. If the line item is based on gross
         *  pricing then the gross price is returned.
         */
        price?: number; // double
        /**
         * Array of price adjustments. Can be empty.
         */
        price_adjustments?: PriceAdjustment[];
        /**
         * The price of the product line item after applying all product-level
         *  adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted
         *  gross price is returned.
         */
        price_after_item_discount?: number; // double
        /**
         * The price of this product line item after considering all
         *  dependent price adjustments and prorating all order-level
         *  price adjustments. For net pricing the net price is returned. For gross
         *  pricing, the gross price is returned.
         */
        price_after_order_discount?: number; // double
        /**
         * 
         */
        product_id?: string;
        /**
         * 
         */
        product_list_item?: ProductListItemReference;
        /**
         * The name of the product.
         */
        product_name?: string;
        /**
         * The quantity of the products represented by this item.
         */
        quantity?: number; // double
        /**
         * The id of the shipment which includes the product item.
         */
        shipment_id?: string;
        /**
         * The reference to the related shipping item if it exists. This is the case if for example when a surcharge is
         *  defined for individual products using a particular a shipping method.
         */
        shipping_item_id?: string;
        /**
         * The tax of the product item before adjustments applying.
         */
        tax?: number; // double
        /**
         * The price used to calculate the tax for this product item.
         */
        tax_basis?: number; // double
        /**
         * The tax class ID for the product item or null
         *  if no tax class ID is associated with the product item.
         */
        tax_class_id?: string;
        /**
         * The tax rate, which is the decimal tax rate to be applied
         *  to the product represented by this item.
         */
        tax_rate?: number; // double
    }
    /**
     * Document representing an option value.
     */
    export interface OptionValue {
        /**
         * A flag indicating whether this option value is the default one.
         */
        default?: boolean;
        /**
         * The id of the option value.
         */
        id: string;
        /**
         * The localized name of the option value.
         */
        name?: string;
        /**
         * The effective price of this option value.
         */
        price?: number; // double
    }
    /**
     * Document representing an order.
     */
    export interface Order {
        /**
         * The products tax after discounts applying in purchase currency.
         * 
         *  Adjusted merchandize prices represent the sum of product prices before
         *  services such as shipping have been added, but after adjustment from
         *  promotions have been added.
         */
        adjusted_merchandize_total_tax?: number; // double
        /**
         * The tax of all shipping line items of the line item container after
         *  shipping adjustments have been applied.
         */
        adjusted_shipping_total_tax?: number; // double
        /**
         * The billing address. This property is part of basket checkout information only.
         */
        billing_address?: OrderAddress;
        /**
         * The bonus discount line items of the line item container.
         */
        bonus_discount_line_items?: BonusDiscountLineItem[];
        /**
         * The sales channel for the order.
         */
        channel_type?: "storefront" | "callcenter" | "marketplace" | "dss" | "store" | "pinterest" | "twitter" | "facebookads" | "subscriptions" | "onlinereservation" | "customerservicecenter" | "instagramcommerce";
        /**
         * The confirmation status of the order.
         */
        confirmation_status: "not_confirmed" | "confirmed";
        /**
         * The sorted array of coupon items. This array can be empty.
         */
        coupon_items?: CouponItem[];
        /**
         * The name of the user who created the order.
         */
        created_by?: string;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The ISO 4217 mnemonic code of the currency.
         */
        currency?: string;
        /**
         * The customer information for logged in customers. This property is part of basket checkout information only.
         */
        customer_info?: CustomerInfo;
        /**
         * The name of the customer associated with this order.
         */
        customer_name?: string;
        /**
         * The export status of the order.
         */
        export_status: "not_exported" | "exported" | "ready" | "failed";
        /**
         * The external status of the order.
         */
        external_order_status?: string;
        /**
         * The sorted array of gift certificate line items. This array can be empty.
         */
        gift_certificate_items?: GiftCertificateItem[];
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The products total tax in purchase currency.
         * 
         *  Merchandize total prices represent the sum of product prices before
         *  services such as shipping or adjustment from promotions have
         *  been added.
         */
        merchandize_total_tax?: number; // double
        /**
         * The notes for the line item container.
         */
        notes?: SimpleLink;
        /**
         * The order number of the order.
         */
        order_no?: string;
        /**
         * The array of order level price adjustments. This array can be empty.
         */
        order_price_adjustments?: PriceAdjustment[];
        /**
         * The order token used to secure the lookup of an order on base of the
         *  plain order number. The order token contains only URL safe characters.
         */
        order_token?: string;
        /**
         * The total price of the order, including products, shipping and tax. This property is part of basket checkout
         *  information only.
         */
        order_total?: number; // double
        /**
         * The payment instruments list for the order.
         */
        payment_instruments?: OrderPaymentInstrument[];
        /**
         * The payment status of the order.
         */
        payment_status: "not_paid" | "part_paid" | "paid";
        /**
         * The sorted array of product items (up to a maximum of 50 items). This array can be empty.
         */
        product_items?: ProductItem[];
        /**
         * The total price of all product items after all product discounts.
         *  Depending on taxation policy the returned price is net or gross.
         */
        product_sub_total?: number; // double
        /**
         * The total price of all product items after all product and order discounts.
         *  Depending on taxation policy the returned price is net or gross.
         */
        product_total?: number; // double
        /**
         * The array of shipments. This property is part of basket checkout information only.
         */
        shipments?: Shipment[];
        /**
         * The sorted array of shipping items. This array can be empty.
         */
        shipping_items?: ShippingItem[];
        /**
         * The shipping status of the order.
         */
        shipping_status: "not_shipped" | "part_shipped" | "shipped";
        /**
         * The total shipping price of the order after all shipping discounts. Excludes tax if taxation policy is net. Includes
         *  tax if taxation policy is gross. This property is part of basket checkout information only.
         */
        shipping_total?: number; // double
        /**
         * The tax of all shipping line items of the line item container before
         *  shipping adjustments have been applied.
         */
        shipping_total_tax?: number; // double
        /**
         * The site where the order resides.
         */
        site_id?: string;
        /**
         * Gets the source code assigned to this basket.
         */
        source_code?: string;
        /**
         * The status of the order.
         */
        status: "created" | "new" | "open" | "completed" | "cancelled" | "replaced" | "failed";
        /**
         * The total tax amount of the order. This property is part of basket checkout information only.
         */
        tax_total?: number; // double
        /**
         * The taxation the line item container is based on.
         */
        taxation?: "gross" | "net";
    }
    /**
     * Document representing an order address.
     */
    export interface OrderAddress {
        /**
         * The first address.
         */
        address1: string;
        /**
         * The second address.
         */
        address2?: string;
        /**
         * The city.
         */
        city: string;
        /**
         * The company name.
         */
        company_name?: string;
        /**
         * The two-letter ISO 3166-1 (Alpha-2) country code.
         */
        country_code: string;
        /**
         * The first name.
         */
        first_name: string;
        /**
         * The full name.
         */
        full_name?: string;
        /**
         * Id used to identify this address
         */
        id?: string;
        /**
         * The job title.
         */
        job_title?: string;
        /**
         * The last name.
         */
        last_name: string;
        /**
         * The phone number.
         */
        phone?: string;
        /**
         * The post box.
         */
        post_box?: string;
        /**
         * The postal code.
         */
        postal_code: string;
        /**
         * The salutation.
         */
        salutation?: string;
        /**
         * The second name.
         */
        second_name?: string;
        /**
         * The state code.
         */
        state_code?: string;
        /**
         * The suffix.
         */
        suffix?: string;
        /**
         * The suite.
         */
        suite?: string;
        /**
         * The title.
         */
        title?: string;
    }
    /**
     * Document representing an order payment card request.
     */
    export interface OrderPaymentCardRequest {
        /**
         * 
         */
        card_type?: string;
        /**
         * 
         */
        credit_card_token?: string;
        /**
         * 
         */
        expiration_month?: number; // int32
        /**
         * 
         */
        expiration_year?: number; // int32
        /**
         * 
         */
        holder?: string;
        /**
         * 
         */
        issue_number?: string;
        /**
         * 
         */
        number?: string;
        /**
         * The security code for the payment card.
         */
        security_code?: string;
        /**
         * 
         */
        valid_from_month?: number; // int32
        /**
         * 
         */
        valid_from_year?: number; // int32
    }
    /**
     * Document representing an order payment instrument.
     */
    export interface OrderPaymentInstrument {
        /**
         * The payment transaction amount.
         */
        amount?: number; // double
        /**
         * The authorization status of the payment transaction.
         */
        authorization_status?: Status;
        /**
         * The bank routing number.
         */
        bank_routing_number?: string;
        /**
         * The masked gift certificate code.
         */
        masked_gift_certificate_code?: string;
        /**
         * The payment bank account.
         */
        payment_bank_account?: PaymentBankAccount;
        /**
         * The payment card.
         */
        payment_card?: PaymentCard;
        /**
         * The payment instrument ID.
         */
        payment_instrument_id?: string;
        /**
         * The payment method id. Optional if a customer payment instrument id is specified.
         */
        payment_method_id?: string;
    }
    /**
     * Document representing an order payment instrument request.
     */
    export interface OrderPaymentInstrumentRequest {
        /**
         * The payment transaction amount.
         */
        amount?: number; // double
        /**
         * The bank routing number.
         */
        bank_routing_number?: string;
        /**
         * A flag indicating whether a related customer payment instrument should be created. The CustomerPaymentInstrument
         *  is only created when the OrderPaymentInstrument was authorized successfully.
         */
        create_customer_payment_instrument?: boolean;
        /**
         * The id of a customer payment instrument.
         */
        customer_payment_instrument_id?: string;
        /**
         * The gift certificate code.
         */
        gift_certificate_code?: string;
        /**
         * The payment bank account request data.
         */
        payment_bank_account?: PaymentBankAccountRequest;
        /**
         * The payment card.
         */
        payment_card?: OrderPaymentCardRequest;
        /**
         * The payment method id. Optional if a customer payment instrument id is specified.
         */
        payment_method_id?: string;
    }
    /**
     * Document representing an order search hit.
     */
    export interface OrderSearchHit {
        /**
         * 
         */
        data?: Order;
        /**
         * The hit's relevance score.
         */
        relevance?: number; // double
    }
    /**
     * Document representing an order search request.
     */
    export interface OrderSearchRequest {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * List of expansions to be applied to each search results. Expands are optional.
         */
        expand?: string[];
        /**
         * The query to apply
         */
        query: Query;
        /**
         * The field to be selected.
         */
        select?: string;
        /**
         * The list of sort clauses configured for the search request. Sort clauses are optional.
         */
        sorts?: Sort[];
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
    }
    /**
     * Document representing an order search result.
     */
    export interface OrderSearchResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        data?: {
        }[];
        /**
         * The list of expands set for the search request. Expands are optional.
         */
        expand?: string[];
        /**
         * The sorted array of search hits. This array can be empty.
         */
        hits?: OrderSearchHit[];
        /**
         * The data that can be used (as parameters on the search request) to retrieve the next result page.
         */
        next?: ResultPage;
        /**
         * The data that can be used to retrieve the previous result page (as parameters on the search request).
         */
        previous?: ResultPage;
        /**
         * The query passed into the search
         */
        query?: Query;
        /**
         * The fields that you want to select.
         */
        select?: string;
        /**
         * The list of sort clauses configured for the search request. Sort clauses are optional.
         */
        sorts?: Sort[];
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a password change request.
     */
    export interface PasswordChangeRequest {
        /**
         * The customer's current password.
         */
        current_password: string;
        /**
         * The customer's new password.
         */
        password: string;
    }
    /**
     * Document representing a password reset request.
     */
    export interface PasswordReset {
        /**
         * The customer's login or the customer's email depending on the type value.
         */
        identification?: string;
        /**
         * The type of customer identification.
         */
        type?: "email" | "login";
    }
    /**
     * Document representing a payment bank account.
     */
    export interface PaymentBankAccount {
        /**
         * The last 4 characters of the decrypted driver's license number of the bank account associated with this payment
         *  instrument.
         */
        drivers_license_last_digits?: string;
        /**
         * The driver license state code.
         */
        drivers_license_state_code?: string;
        /**
         * The holder of the bank account.
         */
        holder?: string;
        /**
         * The decrypted driver's license number of the bank account with all but the last 4 characters replaced with a '*'
         *  character.
         */
        masked_drivers_license?: string;
        /**
         * The bank account masked number.
         */
        masked_number?: string;
        /**
         * The last digits of the bank account number.
         */
        number_last_digits?: string;
    }
    /**
     * Document representing a payment bank account request.
     */
    export interface PaymentBankAccountRequest {
        /**
         * The drivers license.
         */
        drivers_license?: string;
        /**
         * The driver license state code.
         */
        drivers_license_state_code?: string;
        /**
         * The holder of the bank account.
         */
        holder?: string;
        /**
         * The payment bank account number.
         */
        number?: string;
    }
    /**
     * Document representing a payment card.
     */
    export interface PaymentCard {
        /**
         * The payment card type (for example, 'Visa').
         */
        card_type: string;
        /**
         * A flag indicating if the credit card is expired.
         */
        credit_card_expired?: boolean;
        /**
         * A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data at the
         *  token store.
         */
        credit_card_token?: string;
        /**
         * The month when the payment card expires.
         */
        expiration_month?: number; // int32
        /**
         * The year when the payment card expires.
         */
        expiration_year?: number; // int32
        /**
         * The payment card holder.
         */
        holder?: string;
        /**
         * The payment card issue number.
         */
        issue_number?: string;
        /**
         * The masked credit card number.
         */
        masked_number?: string;
        /**
         * The last digits of credit card number.
         */
        number_last_digits?: string;
        /**
         * The payment card valid from month.
         */
        valid_from_month?: number; // int32
        /**
         * The payment card valid from year.
         */
        valid_from_year?: number; // int32
    }
    /**
     * Document representing the specification for a payment card.
     *  
     */
    export interface PaymentCardSpec {
        /**
         * The type of the payment card.
         */
        card_type?: string;
        /**
         * A flag indicating whether the card number is verified using the Luhn checksum algorithm.
         */
        checksum_verification_enabled?: boolean;
        /**
         * The localized description of the payment card.
         */
        description?: string;
        /**
         * The URL to the image that represents the payment card.
         */
        image?: string;
        /**
         * The localized name of the payment card.
         */
        name?: string;
        /**
         * The sorted list of number lengths (individual lengths as well as
         *  length ranges).
         */
        number_lengths?: string[];
        /**
         * The sorted list of number prefixes (individual prefixes as well
         *  as prefix ranges).
         */
        number_prefixes?: string[];
        /**
         * The length of the security code for this card.
         */
        security_code_length?: number; // int32
    }
    /**
     * Document representing a payment method.
     */
    export interface PaymentMethod {
        /**
         * The sorted array of payment cards (included only when the system payment method is CREDIT_CARD).
         */
        cards?: PaymentCardSpec[];
        /**
         * The localized description of the payment method or card.
         */
        description?: string;
        /**
         * The id of the payment method or card.
         */
        id: string;
        /**
         * The URL to the image that represents the payment method or card.
         */
        image?: string;
        /**
         * The localized name of the payment method or card.
         */
        name?: string;
        /**
         * The payment processor ID.
         */
        payment_processor_id?: string;
    }
    /**
     * Result document of payment methods applicable for a basket.
     */
    export interface PaymentMethodResult {
        /**
         * The applicable payment methods.
         */
        applicable_payment_methods?: PaymentMethod[];
    }
    /**
     * Document representing a price adjustment within a basket or order. Price adjustments
     *  can be assigned at the order, product, or shipping level. They can be created by the
     *  promotion engine (if the custom flag is set to false) or can be added by custom logic (if the custom
     *  flag is set to true). For custom price adjustments created by a user, the manual flag should be
     *  set to true; this is always the case for price adjustments created using OCAPI.
     *  
     */
    export interface PriceAdjustment {
        /**
         * A price adjustment that provides details of the discount that was applied.
         *  This is null for custom price adjustments created
         *  without discount details.
         */
        applied_discount?: Discount;
        /**
         * The coupon code that triggered the promotion, provided
         *  the price adjustment was created as the result of a promotion
         *  being triggered by a coupon.
         */
        coupon_code?: string;
        /**
         * The user who created the price adjustment.
         */
        created_by?: string;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * A flag indicating whether this price adjustment was created by custom logic. This flag is
         *  set to true unless the price adjustment was created by the promotion engine.
         */
        custom?: boolean;
        /**
         * The text describing the item in more detail.
         */
        item_text?: string;
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * A flag indicating whether this price adjustment was created in a manual process.
         *  
         *  For custom price adjustments created using the shop API, this always
         *  returns true. Using the scripting API, however, it is possible to set this to true
         *  or false, according to the use case.
         */
        manual?: boolean;
        /**
         * The adjustment price.
         */
        price?: number; // double
        /**
         * The price adjustment id (uuid).
         */
        price_adjustment_id?: string;
        /**
         * The id of the related promotion. Custom price adjustments
         *  can be assigned any promotion id so long it is not
         *  used by a price adjustment belonging to the same item
         *  and is not used by promotion defined in the promotion engine.
         *  If not specified, a promotion id is generated.
         */
        promotion_id?: string;
        /**
         * The URL addressing the related promotion.
         */
        promotion_link?: string;
        /**
         * The reason why this price adjustment was made.
         */
        reason_code?: "PRICE_MATCH" | "BACKORDER" | "EVEN_EXCHANGE";
    }
    /**
     * 
     *  A price adjustment limit specifies the amount of manual adjustment that can be applied by a user at the specified
     *  level.
     *  
     */
    export interface PriceAdjustmentLimit {
        /**
         * The value for the currency or null if no currency value is specified.
         */
        amount?: number; // double
        /**
         * Returns the currency of the Price Adjustment Limit or null if not applicable.
         *  
         *  Will be null if this is a percent limit only.
         *  
         *  Price adjustment limits can be given up to a fixed amount (unit=a currency unit).
         */
        currency?: string;
        /**
         * Returns percentage value of the Price Adjustment Limit or null if not applicable.
         *  
         *  Will be null if this is a currency limit only.
         *  
         */
        percent?: number; // double
        /**
         * The Price Adjustment Limit type - ITEM, SHIPPING or ORDER. It identifies the level at which the Price Adjustment
         *  is applicable.
         */
        type?: "item" | "shipping" | "order";
    }
    /**
     * Document representing a list of PriceAdjustmentLimit items.
     *  It returns all the price adjustment limits for a particular user
     *  across various Access Roles.
     */
    export interface PriceAdjustmentLimits {
        /**
         * The list of price adjustment limits applicable for a user across all roles.
         */
        limits?: PriceAdjustmentLimit[];
    }
    /**
     * Document representing a price adjustment request.
     *  
     */
    export interface PriceAdjustmentRequest {
        /**
         * A discount that you can specify instead of a price.
         *  When defining a discount, you must specify a type and
         *  a value.
         */
        discount?: DiscountRequest;
        /**
         * The item to which the price adjustment should be added, depending on the specified level.
         *  If the level is 'order', you need not specify an item id. If 'shipping', specify the uuid
         *  of the shipping item. If 'product', specify the uuid of the product item.
         */
        item_id?: string;
        /**
         * The text describing the item in more detail.
         */
        item_text?: string;
        /**
         * The level at which the adjustment is applied. When a product or shipping
         *  level is specified, you must also specify the item id.
         */
        level: "product" | "shipping" | "order";
        /**
         * The id of the related promotion. Custom price adjustments
         *  can be assigned any promotion id so long it is not
         *  used by a price adjustment belonging to the same item
         *  and is not used by promotion defined in the promotion engine.
         *  If not specified, a promotion id is generated.
         */
        promotion_id?: string;
        /**
         * The reason why this price adjustment was made.
         */
        reason_code?: "PRICE_MATCH" | "BACKORDER" | "EVEN_EXCHANGE";
    }
    /**
     * Document representing a product.
     */
    export interface Product {
        /**
         * The product's brand.
         */
        brand?: string;
        /**
         * The array of all bundled products of this product.
         */
        bundled_products?: BundledProduct[];
        /**
         * The ISO 4217 mnemonic code of the currency.
         */
        currency?: string;
        /**
         * The European Article Number.
         */
        ean?: string;
        fetch_date?: number; // int32
        /**
         * The id (SKU) of the product.
         */
        id: string;
        /**
         * The array of product image groups.
         */
        image_groups?: ImageGroup[];
        /**
         * The array of product inventories explicitly requested via 'inventory_ids' query parameter. This property
         *  is only returned in context of the 'availability' expansion.
         */
        inventories?: Inventory[];
        /**
         * The site default inventory information. This property is only
         *  returned in context of the 'availability' expansion.
         */
        inventory?: Inventory;
        /**
         * The localized product long description.
         */
        long_description?: string; // html
        /**
         * The products manufacturer name.
         */
        manufacturer_name?: string;
        /**
         * The products manufacturer sku.
         */
        manufacturer_sku?: string;
        /**
         * The master product information. Only for types master, variation group and variant.
         */
        master?: Master;
        /**
         * The minimum order quantity for this product.
         */
        min_order_quantity?: number; // double
        /**
         * The localized product name.
         */
        name?: string;
        /**
         * The array of product options. This array can be empty. Only for type option.
         */
        options?: Option[];
        /**
         * The localized products page description.
         */
        page_description?: string;
        /**
         * The localized products page description.
         */
        page_keywords?: string;
        /**
         * The localized products page title.
         */
        page_title?: string;
        /**
         * The sales price of the product. In case of complex products like master or set this is the minimum price of
         *  related child products.
         */
        price?: number; // double
        /**
         * The maximum sales of related child products in case of complex products like master or set.
         */
        price_max?: number; // double
        /**
         * The prices map with price book ids and their values.
         */
        prices?: {
            [name: string]: number; // double
        };
        /**
         * The id of the products primary category.
         */
        primary_category_id?: string;
        /**
         * The array of source and target products links information.
         */
        product_links?: ProductLink[];
        /**
         * The array of active customer product promotions for this product. This array can be empty.
         *  Coupon promotions are not returned in this array.
         */
        product_promotions?: ProductPromotion[];
        /**
         * Returns a list of recommendations.
         */
        recommendations?: Recommendation[];
        /**
         * The array of set products of this product.
         */
        set_products?: Product[];
        /**
         * The localized product short description.
         */
        short_description?: string; // html
        /**
         * The steps in which the order amount of the product can be
         *  increased.
         */
        step_quantity?: number; // double
        /**
         * The product type information. Can be one or multiple of the following values: item,master,variation_group,variant,bundle,set.
         */
        type?: ProductType;
        /**
         * The sales unit of the product.
         */
        unit?: string;
        /**
         * The Universal Product Code.
         */
        upc?: string;
        /**
         * The array of actual variants. This array can be empty. Only for types master, variation group and variant.
         */
        variants?: Variant[];
        /**
         * Sorted array of variation attributes information. This array can be empty. Only for types master,
         *  variation group and variant.
         */
        variation_attributes?: VariationAttribute[];
        /**
         * The array of actual variation groups. This array can be empty. Only for types master, variation group and variant.
         */
        variation_groups?: VariationGroup[];
        /**
         * The actual variation attribute id - value pairs. Only for type variant and
         *  variation group.
         */
        variation_values?: {
            [name: string]: string;
        };
    }
    /**
     * Document representing a link to the resource for product details.
     */
    export interface ProductDetailsLink {
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The description of the product.
         */
        product_description?: string;
        /**
         * The id of the product.
         */
        product_id: string;
        /**
         * The name of the product.
         */
        product_name?: string;
        /**
         * The link title.
         */
        title?: string;
    }
    /**
     * Document representing a product item.
     */
    export interface ProductItem {
        /**
         * The tax of the product item after adjustments applying.
         */
        adjusted_tax?: number; // double
        /**
         * The base price for the line item, which is the
         *  price of the unit before applying adjustments, in the purchase
         *  currency. The base price may be net or gross of tax depending
         *  on the configured taxation policy.
         */
        base_price?: number; // double
        /**
         * The id of the bonus discount line item this bonus product relates to.
         */
        bonus_discount_line_item_id?: string;
        /**
         * A flag indicating whether the product item is a bonus.
         */
        bonus_product_line_item?: boolean;
        /**
         * The array of bundled product items. Can be empty.
         */
        bundled_product_items?: ProductItem[];
        /**
         * Returns true if the item is a gift.
         */
        gift?: boolean;
        /**
         * The gift message.
         */
        gift_message?: string;
        /**
         * The inventory list id associated with this item.
         */
        inventory_id?: string;
        /**
         * The item identifier. Use this to identify an item when updating the item quantity or creating a custom price
         *  adjustment for an item.
         */
        item_id?: string;
        /**
         * The text describing the item in more detail.
         */
        item_text?: string;
        /**
         * The array of option items. This array can be empty.
         */
        option_items?: OptionItem[];
        /**
         * The price of the line item before applying any adjustments. If the line item is based on net pricing
         *  then the net price is returned. If the line item is based on gross
         *  pricing then the gross price is returned.
         */
        price?: number; // double
        /**
         * Array of price adjustments. Can be empty.
         */
        price_adjustments?: PriceAdjustment[];
        /**
         * The price of the product line item after applying all product-level
         *  adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted
         *  gross price is returned.
         */
        price_after_item_discount?: number; // double
        /**
         * The price of this product line item after considering all
         *  dependent price adjustments and prorating all order-level
         *  price adjustments. For net pricing the net price is returned. For gross
         *  pricing, the gross price is returned.
         */
        price_after_order_discount?: number; // double
        /**
         * 
         */
        product_id?: string;
        /**
         * 
         */
        product_list_item?: ProductListItemReference;
        /**
         * The name of the product.
         */
        product_name?: string;
        /**
         * The quantity of the products represented by this item.
         */
        quantity: number; // double
        /**
         * The id of the shipment which includes the product item.
         */
        shipment_id?: string;
        /**
         * The reference to the related shipping item if it exists. This is the case if for example when a surcharge is
         *  defined for individual products using a particular a shipping method.
         */
        shipping_item_id?: string;
        /**
         * The tax of the product item before adjustments applying.
         */
        tax?: number; // double
        /**
         * The price used to calculate the tax for this product item.
         */
        tax_basis?: number; // double
        /**
         * The tax class ID for the product item or null
         *  if no tax class ID is associated with the product item.
         */
        tax_class_id?: string;
        /**
         * The tax rate, which is the decimal tax rate to be applied
         *  to the product represented by this item.
         */
        tax_rate?: number; // double
    }
    /**
     * Document representing a link between two products. It contains the id of the source and target products, the type of
     *  product link, and URLs to retrieve product data.
     */
    export interface ProductLink {
        /**
         * The semantic id of the product from which this product link is coming.
         */
        source_product_id?: string;
        /**
         * The URL addressing the product from which this product link is coming.
         */
        source_product_link?: string;
        /**
         * The semantic id of the product to which this product link is pointing.
         */
        target_product_id?: string;
        /**
         * The URL addressing the product to which this product link is pointing.
         */
        target_product_link?: string;
        /**
         * The type of this product link.
         */
        type?: "cross_sell" | "replacement" | "up_sell" | "accessory" | "newer_version" | "alt_orderunit" | "spare_part" | "other";
    }
    /**
     * Document representing a product list event.
     */
    export interface ProductListEvent {
        /**
         * The city where the event takes place.
         */
        city?: string;
        /**
         * The country where the event takes place.
         */
        country?: string;
        /**
         * The date when the event takes place.
         */
        date?: string; // date-time
        /**
         * The federal state where the event takes place.
         */
        state?: string;
        /**
         * Type of the event to celebrate.
         */
        type?: string;
    }
    export interface ProductListItemReference {
        /**
         * The id of the product list item.
         */
        id: string;
        priority?: number; // int32
        product_details_link?: ProductDetailsLink;
        /**
         * The link of the product list, the item is assigned
         */
        product_list?: ProductListLink;
        public?: boolean;
        purchased_quantity?: number; // double
        quantity?: number; // double
        type?: "product" | "gift_certificate";
    }
    /**
     * Document representing a link to a product list.
     */
    export interface ProductListLink {
        /**
         * The description of this product list.
         */
        description?: string;
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The name of this product list.
         */
        name?: string;
        /**
         * A flag indicating whether the owner made this product list available for access
         *  by other customers.
         */
        public?: boolean;
        /**
         * The link title.
         */
        title?: string;
        /**
         * The type of the product list.
         */
        type?: "wish_list" | "gift_registry" | "shopping_list" | "custom_1" | "custom_2" | "custom_3";
    }
    /**
     * 
     *  A ProductListRegistrant is typically associated with an event related product list such as a gift registry. It holds
     *  information about a person associated with the event such as a bride or groom.
     *  
     */
    export interface ProductListRegistrant {
        /**
         * The first name of the registrant.
         */
        first_name?: string;
        /**
         * The last name of the registrant.
         */
        last_name?: string;
        /**
         * The role of the registrant.
         */
        role?: string;
    }
    /**
     * Document representing a product list shipping address.
     */
    export interface ProductListShippingAddress {
        /**
         * The id of this address.
         */
        address_id: string;
        /**
         * The city of this address.
         */
        city?: string;
        /**
         * The first name of this address.
         */
        first_name?: string;
        /**
         * The last name of this address.
         */
        last_name?: string;
    }
    /**
     * Document representing a product promotion.
     */
    export interface ProductPromotion {
        /**
         * The localized call-out message of the promotion.
         */
        callout_msg?: string;
        /**
         * The URL addressing the promotion.
         */
        link?: string;
        /**
         * The unique id of the promotion.
         */
        promotion_id?: string;
        /**
         * The promotional price for this product.
         */
        promotional_price?: number; // double
    }
    /**
     * Document representing a product reference.
     */
    export interface ProductRef {
        /**
         * The ID of the product reference.
         */
        id: string;
        /**
         * The link to the product reference.
         */
        link: string;
    }
    /**
     * Result document containing an array of products.
     */
    export interface ProductResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of product documents.
         */
        data?: Product[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a product search hit.
     */
    export interface ProductSearchHit {
        /**
         * The ISO 4217 mnemonic code of the currency.
         */
        currency?: string;
        /**
         * The type information for the search hit.
         */
        hit_type?: string;
        /**
         * The first image of the product hit for the configured viewtype.
         */
        image?: Image;
        /**
         * The URL addressing the product.
         */
        link?: string;
        /**
         * A flag indicating whether the product is orderable.
         */
        orderable?: boolean;
        /**
         * The sales price of the product. In case of complex products like master or set this is the minimum price of
         *  related child products.
         */
        price?: number; // double
        /**
         * The maximum sales of related child products in case of complex products like master or set.
         */
        price_max?: number; // double
        /**
         * The prices map with price book ids and their values.
         */
        prices?: {
            [name: string]: number; // double
        };
        /**
         * The id (SKU) of the product.
         */
        product_id: string;
        /**
         * The localized name of the product.
         */
        product_name?: string;
        /**
         * The type information for the product.
         */
        product_type?: ProductType;
        /**
         * The first represented product.
         */
        represented_product?: ProductRef;
        /**
         * All the represented products.
         */
        represented_products?: ProductRef[];
        /**
         * The array of represented variation attributes (for the master product only). This array can be empty.
         */
        variation_attributes?: VariationAttribute[];
    }
    /**
     * Document representing a product search refinement attribute.
     */
    export interface ProductSearchRefinement {
        /**
         * The id of the search refinement attribute. In the case of an attribute refinement, this is the attribute id.
         *  Custom attributes are marked by the prefix "c_" (for example, "c_refinementColor"). In the case of a
         *  category refinement, the id must be "cgid". In the case of a price refinement, the id must be "price".
         */
        attribute_id: string;
        /**
         * The localized label of the refinement.
         */
        label?: string;
        /**
         * The sorted array of refinement values. This array can be empty.
         */
        values?: ProductSearchRefinementValue[];
    }
    /**
     * Document representing a product search refinement value.
     */
    export interface ProductSearchRefinementValue {
        /**
         * The localized description of the refinement value.
         */
        description?: string;
        /**
         * The number of search hits when selecting the refinement value. Can be 0.
         */
        hit_count?: number; // int32
        /**
         * The localized label of the refinement value.
         */
        label?: string;
        /**
         * The optional presentation id associated with the refinement value.
         *  The presentation id can be used, for example, to associate an id with
         *  an HTML widget.
         */
        presentation_id?: string;
        /**
         * The refinement value. In the case of an attribute refinement, this is the bucket,
         *  the attribute value, or a value range. In the case of a category refinement, this is the
         *  category id. In the case of a price refinement,k this is the price range. Ranges are
         *  enclosed by parentheses and separated by ".."; for example, "(100..999)" and "(Aa..Fa)"
         *  are valid ranges.
         */
        value?: string;
        /**
         * The array of hierarchical refinement values. This array can be empty.
         */
        values?: ProductSearchRefinementValue[];
    }
    /**
     * Document representing a product search result.
     */
    export interface ProductSearchResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        data?: {
        }[];
        fetch_date?: number; // int32
        /**
         * The sorted array of search hits. This array can be empty.
         */
        hits?: ProductSearchHit[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * The query String that was searched for.
         */
        query?: string;
        /**
         * The sorted array of search refinements. This array can be empty.
         */
        refinements?: ProductSearchRefinement[];
        /**
         * The suggestion given by the system for the submitted search phrase.
         */
        search_phrase_suggestions?: Suggestion;
        /**
         * A map of selected refinement attribute id/value(s) pairs. The sorting order is the same as in request URL.
         */
        selected_refinements?: {
            [name: string]: string;
        };
        /**
         * The id of the applied sorting option.
         */
        selected_sorting_option?: string;
        /**
         * The sorted array of search sorting options. This array can be empty.
         */
        sorting_options?: ProductSearchSortingOption[];
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a product search sorting option.
     */
    export interface ProductSearchSortingOption {
        /**
         * The id of the sorting option.
         */
        id?: string;
        /**
         * The localized label of the sorting option.
         */
        label?: string;
    }
    /**
     * Document representing a link to a product.
     */
    export interface ProductSimpleLink {
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The link title.
         */
        title?: string;
    }
    /**
     * Document representing a product type.
     */
    export interface ProductType {
        /**
         * A flag indicating whether the product is a bundle.
         */
        bundle?: boolean;
        /**
         * A flag indicating whether the product is a standard item.
         */
        item?: boolean;
        /**
         * A flag indicating whether the product is a master.
         */
        master?: boolean;
        /**
         * A flag indicating whether the product is an option.
         */
        option?: boolean;
        /**
         * A flag indicating whether the product is a set.
         */
        set?: boolean;
        /**
         * A flag indicating whether the product is a variant.
         */
        variant?: boolean;
        /**
         * A flag indicating whether the product is a variation group.
         */
        variation_group?: boolean;
    }
    /**
     * Document representing a promotion.
     */
    export interface Promotion {
        /**
         * The localized call-out message of the promotion.
         */
        callout_msg?: string; // html
        /**
         * The currency that a promotion can be applied to. A null value means that the promotion applies to all allowed
         *  currencies.
         */
        currency?: string;
        /**
         * The localized detailed description of the promotion.
         */
        details?: string; // html
        /**
         * An optional product search link. Product promotions that are marked searchable provide a product search link with the promotion id as
         *  refinement.
         */
        discounted_products_link?: string;
        /**
         * The end date of the promotion. This property follows the ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ . The time
         *  zone of the date time is always UTC.
         */
        end_date?: string; // date-time
        /**
         * The unique id of the promotion.
         */
        id: string;
        /**
         * The URL to the promotion image.
         */
        image?: string;
        /**
         * The localized name of the promotion.
         */
        name?: string;
        /**
         * The start date of the promotion. This property follows the ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ. The
         *  time zone of the date time is always UTC.
         */
        start_date?: string; // date-time
    }
    /**
     * Document representing a promotion link.
     */
    export interface PromotionLink {
        /**
         * The localized call-out message of the promotion.
         */
        callout_msg?: string; // html
        link?: string;
        /**
         * The localized name of the promotion.
         */
        name?: string;
        /**
         * The unique id of the promotion.
         */
        promotion_id: string;
        title?: string;
    }
    /**
     * Result document containing an array of promotions.
     */
    export interface PromotionResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of promotion documents.
         */
        data?: Promotion[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    export interface PublicProductList {
        /**
         * The coRegistrant of this product list.
         */
        co_registrant?: ProductListRegistrant;
        /**
         * Returns the value of attribute 'creationDate'.
         */
        creation_date?: string; // date-time
        /**
         * The description of this product list.
         */
        description?: string;
        /**
         * The event of this product list.
         */
        event?: ProductListEvent;
        /**
         * The id of this product list.
         */
        id?: string;
        /**
         * The resource link to the items of this product list.
         */
        items_link?: ProductSimpleLink;
        /**
         * Returns the value of attribute 'lastModified'.
         */
        last_modified?: string; // date-time
        /**
         * The name of this product list.
         */
        name?: string;
        /**
         * The product list items
         */
        product_list_items?: PublicProductListItem[];
        /**
         * The abbreviated shipping address of this product list representing what anonymous user can see.
         */
        product_list_shipping_address?: ProductListShippingAddress;
        /**
         * Indicates whether the owner made this product list available for access by other customers.
         */
        public?: boolean;
        /**
         * The registrant of this product list.
         */
        registrant?: ProductListRegistrant;
        /**
         * The type of the product list.
         */
        type?: "wish_list" | "gift_registry" | "shopping_list" | "custom_1" | "custom_2" | "custom_3";
    }
    /**
     * Document representing a product list item.
     */
    export interface PublicProductListItem {
        /**
         * The id of this product list item.
         */
        id?: string;
        /**
         * The priority of the item.
         */
        priority?: number; // int32
        /**
         * The product item
         */
        product?: Product;
        /**
         * A link to the product.
         */
        product_details_link?: ProductSimpleLink;
        /**
         * The type of the item.
         */
        type?: "product" | "gift_certificate";
    }
    /**
     * Result document containing an array of product list items.
     */
    export interface PublicProductListItemResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of product list item documents.
         */
        data?: PublicProductListItem[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a link to a public product list.
     */
    export interface PublicProductListLink {
        /**
         * The description of this product list.
         */
        description?: string;
        /**
         * The target of the link.
         */
        link?: string;
        /**
         * The name of this product list.
         */
        name?: string;
        /**
         * The link title.
         */
        title?: string;
        /**
         * The type of the product list.
         */
        type?: "wish_list" | "gift_registry" | "shopping_list" | "custom_1" | "custom_2" | "custom_3";
    }
    /**
     * Result document containing an array of public product list links.
     */
    export interface PublicProductListResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of product list link documents.
         */
        data?: PublicProductListLink[];
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    /**
     * Document representing a query. A query contains a set of objects that define criteria
     *  used to select records. A query can contain one of the following:
     * 
     */
    export type Query = any;
    /**
     * Document representing a query filter. A query filter wraps any query and allows it to be used as a filter.
     *  
     */
    export interface QueryFilter {
        /**
         * The query, which should be used as a filter.
         */
        query: Query;
    }
    /**
     * Document representing a range compare with range filter, named Range2Filter.
     */
    export interface Range2Filter {
        /**
         * compare mode: overlap, containing, contained (default to \"overlap\"). It is optional.
         */
        filter_mode?: "overlap" | "containing" | "contained";
        /**
         * The field name of the field that start the range 1.
         */
        from_field: string;
        /**
         * A flag indicating whether the lower bound of the range is inclusive (or exclusive). The default is true (which means that the given  lower bound is inclusive).
         */
        from_inclusive?: boolean;
        /**
         * The configured lower bound of the filter range. The lower bound is optional. If not given, the range is  open ended with respect to the lower bound.
         */
        from_value?: {
        };
        /**
         * The field name of the field that end the range 1.
         */
        to_field: string;
        /**
         * A flag indicating whether the upper bound of the range is inclusive (or exclusive). The default is true (which means that the given  upper bound is inclusive).
         */
        to_inclusive?: boolean;
        /**
         * The configured upper bound of the filter range. The upper bound is optional. If not given, the range is  open ended with respect to the upper bound.
         */
        to_value?: {
        };
    }
    /**
     * Document representing a range filter.
     *  
     */
    export interface RangeFilter {
        /**
         * The search field.
         */
        field: string;
        /**
         * The configured lower bound of the filter range. The lower bound is optional. If not given, the range is  open ended with respect to the lower bound.
         */
        from?: {
        };
        /**
         * A flag indicating whether the lower bound of the range is inclusive (or exclusive). The default is true (which means that the given  lower bound is inclusive).
         */
        from_inclusive?: boolean;
        /**
         * The configured upper bound of the filter range. The upper bound is optional. If not given, the range is  open ended with respect to the upper bound.
         */
        to?: {
        };
        /**
         * A flag indicating whether the upper bound of the range is inclusive (or exclusive). The default is true (which means that the given  upper bound is inclusive).
         */
        to_inclusive?: boolean;
    }
    /**
     * Document representing a product recommendation.
     */
    export interface Recommendation {
        /**
         * The localized callout message of the recommendation.
         */
        callout_msg?: string; // html
        /**
         * The image of the recommendation.
         */
        image?: Image;
        /**
         * The localized long description of the recommendation.
         */
        long_description?: string; // html
        /**
         * The localized name of the recommendation.
         */
        name?: string;
        /**
         * The recommendation type of the recommendation.
         */
        recommendation_type: RecommendationType;
        /**
         * The recommended item id of the recommendation.
         */
        recommended_item_id?: string;
        /**
         * The recommended item link of the recommendation.
         */
        recommended_item_link?: string;
        /**
         * The localized short description of the recommendation.
         */
        short_description?: string; // html
    }
    /**
     * Document representing a recommendation type.
     */
    export interface RecommendationType {
        /**
         * The localized display value of the recommendation type.
         */
        display_value?: string;
        /**
         * The value of the recommendation type.
         */
        value?: number; // int32
    }
    /**
     * Data that can be used to get the next and previous page of a Data API results object.
     */
    export interface ResultPage {
        /**
         * Returns the count of search hits to include in the page.
         */
        count?: number; // int32
        /**
         * Returns the zero-based index of the first search hit in the page.
         */
        start?: number; // int32
    }
    /**
     * Document representing a shipment.
     */
    export interface Shipment {
        /**
         * The products tax after discounts applying in purchase currency. Adjusted merchandize prices represent the sum of
         *  product prices before services such as shipping have been added, but after adjustment from promotions have been
         *  added.
         * 
         *  Note that order level adjustments are considered if Discount Taxation preference is set to
         *  "Tax Products and Shipping Only Based on Adjusted Price".
         */
        adjusted_merchandize_total_tax?: number; // double
        /**
         * The tax of all shipping line items of the line item container after shipping adjustments have been applied.
         */
        adjusted_shipping_total_tax?: number; // double
        /**
         * A flag indicating whether the shipment is a gift.
         */
        gift?: boolean;
        /**
         * The gift message.
         */
        gift_message?: string;
        /**
         * The products total tax in purchase currency. Merchandize total prices represent the sum of product prices before
         *  services such as shipping or adjustment from promotions have been added.
         */
        merchandize_total_tax?: number; // double
        /**
         * The total price of all product items after all product discounts. Depending on taxation policy the returned price
         *  is net or gross.
         */
        product_sub_total?: number; // double
        /**
         * The total price of all product items after all product and order discounts. Depending on taxation policy the
         *  returned price is net or gross.
         */
        product_total?: number; // double
        /**
         * The order specific id to identify the shipment.
         */
        shipment_id?: string;
        /**
         * Returns the shipment number for this shipment.
         * 
         *  This number is automatically generated.
         */
        shipment_no?: string;
        /**
         * The total price of the shipment, including products, shipping and tax.
         * 
         *  Note that order level adjustments are not considered.
         */
        shipment_total?: number; // double
        /**
         * The shipping address.
         */
        shipping_address?: OrderAddress;
        /**
         * The shipping method.
         */
        shipping_method?: ShippingMethod;
        /**
         * The shipping status of the shipment.
         */
        shipping_status: "not_shipped" | "shipped";
        /**
         * The total shipping price of the shipment after all shipping discounts. Excludes tax if taxation policy is net.
         *  Includes tax if taxation policy is gross.
         */
        shipping_total?: number; // double
        /**
         * The tax of all shipping line items of the line item container before shipping adjustments have been applied.
         */
        shipping_total_tax?: number; // double
        /**
         * The total tax amount of the shipment.
         * 
         *  Note that order level adjustments are considered if Discount Taxation preference is set to
         *  "Tax Products and Shipping Only Based on Adjusted Price".
         */
        tax_total?: number; // double
        /**
         * The tracking number of the shipment.
         */
        tracking_number?: string;
    }
    /**
     * Document representing a shipping item.
     */
    export interface ShippingItem {
        /**
         * The tax of the product item after adjustments applying.
         */
        adjusted_tax?: number; // double
        /**
         * The base price for the line item, which is the
         *  price of the unit before applying adjustments, in the purchase
         *  currency. The base price may be net or gross of tax depending
         *  on the configured taxation policy.
         */
        base_price?: number; // double
        /**
         * The item identifier. Use this to identify an item when
         *  updating the item quantity or creating a custom price adjustment for an
         *  item.
         */
        item_id?: string;
        /**
         * The text describing the item in more detail.
         */
        item_text?: string;
        /**
         * The price of the line item before applying any adjustments. If the line item is based on net pricing
         *  then the net price is returned. If the line item is based on gross
         *  pricing then the gross price is returned.
         */
        price?: number; // double
        /**
         * Array of price adjustments. Can be empty.
         */
        price_adjustments?: PriceAdjustment[];
        /**
         * The price of the product line item after applying all product-level
         *  adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted
         *  gross price is returned.
         */
        price_after_item_discount?: number; // double
        /**
         * The identifier of the shipment to which this item belongs.
         */
        shipment_id?: string;
        /**
         * The tax of the product item before adjustments applying.
         */
        tax?: number; // double
        /**
         * The price used to calculate the tax for this product item.
         */
        tax_basis?: number; // double
        /**
         * The tax class ID for the product item or null
         *  if no tax class ID is associated with the product item.
         */
        tax_class_id?: string;
        /**
         * The tax rate, which is the decimal tax rate to be applied
         *  to the product represented by this item.
         */
        tax_rate?: number; // double
    }
    /**
     * Document representing a shipping method.
     */
    export interface ShippingMethod {
        /**
         * The localized description of the shipping method.
         */
        description?: string;
        /**
         * The external shipping method.
         */
        external_shipping_method?: string;
        /**
         * The shipping method id.
         */
        id: string;
        /**
         * The localized name of the shipping method.
         */
        name?: string;
        /**
         * The shipping cost total, including shipment level costs and
         *  product level fix and surcharge costs.
         */
        price?: number; // double
        /**
         * The array of active customer shipping promotions for this shipping
         *  method. This array can be empty.
         */
        shipping_promotions?: ShippingPromotion[];
    }
    /**
     * Result document containing shipping methods.
     */
    export interface ShippingMethodResult {
        /**
         * The applicable shipping method documents.
         */
        applicable_shipping_methods?: ShippingMethod[];
        /**
         * The default shipping method.
         */
        default_shipping_method_id?: string;
    }
    /**
     * Document representing a shipping promotion.
     */
    export interface ShippingPromotion {
        /**
         * The localized call-out message of the promotion.
         */
        callout_msg?: string;
        /**
         * The URL addressing the promotion.
         */
        link?: string;
        /**
         * The unique id of the promotion.
         */
        promotion_id?: string;
        /**
         * The localized promotion name.
         */
        promotion_name?: string;
    }
    /**
     * Document representing a link to another resource.
     */
    export interface SimpleLink {
        /**
         * The link to the resource.
         */
        link?: string;
    }
    /**
     * Document representing a site.
     */
    export interface Site {
        /**
         * The list of allowed currencies.
         */
        allowed_currencies?: string[];
        /**
         * A list of all allowed site locales.
         */
        allowed_locales?: Locale[];
        /**
         * The currency mnemonic of the site.
         */
        default_currency?: string;
        /**
         * The default locale of the site.
         */
        default_locale?: string;
        /**
         * The HTTP DIS base URL.
         */
        http_dis_base_url?: string;
        /**
         * The configured HTTP host name. If no host name is configured the instance host name is returned.
         */
        http_hostname?: string;
        /**
         * The HTTP URL to the library content location of the site.
         */
        http_library_content_url?: string;
        /**
         * The HTTP URL to the site content location.
         */
        http_site_content_url?: string;
        /**
         * The HTTPS DIS base URL.
         */
        https_dis_base_url?: string;
        /**
         * The configured HTTPS host name. If no host name is configured the instance host name is returned.
         */
        https_hostname?: string;
        /**
         * The HTTPS URL to the library content location of the site.
         */
        https_library_content_url?: string;
        /**
         * The HTTPS URL to the site content location.
         */
        https_site_content_url?: string;
        /**
         * The id of the site.
         */
        id?: string;
        /**
         * The descriptive name for the site.
         */
        name?: string;
        /**
         * The site status online/offline.
         */
        status?: "online" | "offline";
        /**
         * The time zone of the site (for example, USA/Eastern).
         */
        timezone?: string;
        /**
         * The time zone offset from UTC for the current time in milliseconds (for example, -14400000).
         */
        timezone_offset?: number; // int32
    }
    /**
     * Document representing a sort request.
     */
    export interface Sort {
        /**
         * The name of the field to sort on.
         */
        field?: string;
        /**
         * The sort order to be applied when sorting. When omitted, the default sort order (ASC) is used.
         */
        sort_order?: "asc" | "desc";
    }
    /**
     * Document representing a status of an object.
     */
    export interface Status {
        /**
         * The status code.
         */
        code?: string;
        /**
         * The status message.
         */
        message?: string;
        /**
         * The status.
         *  
         *  For more information on the status values see dw.system.Status.OK and
         *  dw.system.Status.ERROR.
         */
        status?: number; // int32
    }
    /**
     * Document representing a store.
     */
    export interface Store {
        /**
         * The first address of the store.
         */
        address1?: string;
        /**
         * The second address of the store.
         */
        address2?: string;
        /**
         * The city of the store.
         */
        city?: string;
        /**
         * The country code of the store.
         */
        country_code?: string;
        /**
         * The distance to the given geo location in the unit of attribute distance (miles or kilometers).
         */
        distance?: number; // double
        /**
         * The distance unit the distance attribute is measured in (either in miles or kilometers).
         */
        distance_unit?: string;
        /**
         * The email address of the store.
         */
        email?: string;
        /**
         * The fax number of the store.
         */
        fax?: string;
        /**
         * The id of the store.
         */
        id: string;
        /**
         * The store image.
         */
        image?: string;
        /**
         * The inventory list id associated with this store.
         */
        inventory_id?: string;
        /**
         * The latitude of the store.
         */
        latitude?: number; // double
        /**
         * The longitude of the store.
         */
        longitude?: number; // double
        /**
         * The store name.
         */
        name?: string;
        /**
         * The phone number of the store.
         */
        phone?: string;
        /**
         * Whether this store uses Store Point-of-Sale.
         */
        pos_enabled?: boolean;
        /**
         * The postal code of the store.
         */
        postal_code?: string;
        /**
         * The state code of the store.
         */
        state_code?: string;
        /**
         * The store events.
         */
        store_events?: string; // html
        /**
         * The store opening hours.
         */
        store_hours?: string; // html
        /**
         * Whether this store should show up in store locator results.
         */
        store_locator_enabled?: boolean;
    }
    /**
     * Result document containing an array of stores.
     */
    export interface StoreResult {
        /**
         * The number of returned documents.
         */
        count?: number; // int32
        /**
         * The array of store documents.
         */
        data?: Store[];
        /**
         * The URL of the next result page.
         */
        next?: string;
        /**
         * The URL of the previous result page.
         */
        previous?: string;
        /**
         * The zero-based index of the first search hit to include in the result.
         */
        start?: number; // int32
        /**
         * The total number of documents.
         */
        total?: number; // int32
    }
    export interface SuggestedCategory {
        /**
         * The id of the category.
         */
        id?: string;
        /**
         * The URL addressing the category.
         */
        link?: string;
        /**
         * The localized name of the category.
         */
        name?: string;
        /**
         * The name of the parent category.
         */
        parent_category_name?: string;
    }
    export interface SuggestedContent {
        /**
         * The id of the content.
         */
        id?: string;
        /**
         * The URL addressing the content.
         */
        link?: string;
        /**
         * The localized name of the content.
         */
        name?: string;
    }
    /**
     * Document representing a suggested search phrase.
     */
    export interface SuggestedPhrase {
        /**
         * Returns whether this suggested phrase exactly matches the user input search phrase.
         */
        exact_match?: boolean;
        /**
         * Returns the suggested search phrase.
         */
        phrase?: string;
    }
    /**
     * Document representing a product search hit.
     */
    export interface SuggestedProduct {
        /**
         * The ISO 4217 mnemonic code of the currency.
         */
        currency?: string;
        /**
         * The first image of the product hit for the configured viewtype.
         */
        image?: Image;
        /**
         * The URL addressing the product.
         */
        link?: string;
        /**
         * The sales price of the product. In the case of complex products like a master or a set, this is the minimum price of
         *  related child products.
         */
        price?: number; // double
        /**
         * The id (SKU) of the product.
         */
        product_id?: string;
        /**
         * The localized name of the product.
         */
        product_name?: string;
    }
    /**
     * Document representing a suggested term.
     */
    export interface SuggestedTerm {
        /**
         * Returns whether this term value is a completion match.
         */
        completed?: boolean;
        /**
         * Returns whether this term value is a correction match.
         */
        corrected?: boolean;
        /**
         * Returns whether this term value is a exact match.
         */
        exact_match?: boolean;
        /**
         * Returns the term value.
         */
        value?: string;
    }
    /**
     * Document representing a list of suggested terms for each term of a search phrase.
     */
    export interface SuggestedTerms {
        /**
         * Returns the original term that the suggested terms relates to.
         */
        original_term?: string;
        /**
         * Returns the suggested terms.
         */
        terms?: SuggestedTerm[];
    }
    /**
     * Document representing a suggestion.
     */
    export interface Suggestion {
        /**
         * The sorted list of suggested brands. This list can be empty.
         */
        brands?: string[];
        /**
         * The sorted list of suggested categories. This list can be empty.
         */
        categories?: SuggestedCategory[];
        /**
         * The sorted list of suggested content. This list can be empty.
         */
        content?: SuggestedContent[];
        /**
         * The sorted list of suggested custom suggestions. This list can be empty.
         */
        custom_suggestions?: string[];
        /**
         * The sorted list of suggested products. This list can be empty.
         */
        products?: SuggestedProduct[];
        /**
         * A list of suggested phrases. This list can be empty.
         */
        suggested_phrases?: SuggestedPhrase[];
        /**
         * A list of suggested terms. This list can be empty.
         */
        suggested_terms?: SuggestedTerms[];
    }
    /**
     * Document representing a search suggestion result.
     */
    export interface SuggestionResult {
        /**
         * Returns the suggested brands.
         */
        brand_suggestions?: Suggestion;
        /**
         * Returns the suggested categories.
         */
        category_suggestions?: Suggestion;
        /**
         * Returns the suggested content.
         */
        content_suggestions?: Suggestion;
        /**
         * Returns the suggested custom suggestions.
         */
        custom_suggestions?: Suggestion;
        /**
         * Returns the suggested products.
         */
        product_suggestions?: Suggestion;
        /**
         * The query phrase to search for.
         */
        query?: string;
    }
    /**
     * Document representing a term filter.
     *  
     */
    export interface TermFilter {
        /**
         * The filter field.
         */
        field: string;
        /**
         * The operator to compare the field's values with the given ones.
         */
        operator: "is" | "one_of" | "is_null" | "is_not_null" | "less" | "greater" | "not_in" | "neq";
        /**
         * The filter values.
         */
        values?: {
        }[];
    }
    /**
     * A term query matches one (or more) value(s) against one (or more) document field(s). A document is considered a hit
     *  if one of the values matches (exactly) with at least one of the given fields.  The operator "is" can only take
     *  one value, while "one_of" can take multiple. If multiple fields are specified, they are combined using the OR operator.
     *  
     */
    export interface TermQuery {
        /**
         * The document field(s), the value(s) are matched against, combined with the operator.
         */
        fields: string[];
        /**
         * Returns the operator to use for the term query.
         */
        operator: "is" | "one_of" | "is_null" | "is_not_null" | "less" | "greater" | "not_in" | "neq";
        /**
         * The values, the field(s) are compared against, combined with the operator.
         */
        values?: {
        }[];
    }
    /**
     * A text query is used to match some text (i.e. a search phrase possibly consisting of multiple terms) against one or
     *  multiple fields. In case multiple fields are provided, the phrase conceptually forms a logical OR over the fields. In
     *  this case, the terms of the phrase basically have to match within the text, that would result in concatenating all
     *  given fields.
     *  
     */
    export interface TextQuery {
        /**
         * The document fields the search phrase has to match against.
         */
        fields: string[];
        /**
         * A search phrase, which may consist of multiple terms.
         */
        search_phrase: string;
    }
    /**
     * Document representing a product variation.
     */
    export interface Variant {
        /**
         * The URL addressing the product.
         */
        link: string;
        /**
         * A flag indicating whether the variant is orderable.
         */
        orderable?: boolean;
        /**
         * The sales price of the variant.
         */
        price?: number; // double
        /**
         * The id (SKU) of the variant.
         */
        product_id: string;
        /**
         * The actual variation attribute id - value pairs.
         */
        variation_values?: {
            [name: string]: string;
        };
    }
    export interface VariationAttribute {
        id: string;
        name?: string;
        values?: VariationAttributeValue[];
    }
    export interface VariationAttributeValue {
        description?: string;
        name?: string;
        orderable?: boolean;
        value: string;
    }
    /**
     * Document representing a variation group.
     */
    export interface VariationGroup {
        /**
         * The URL addressing the product.
         */
        link?: string;
        /**
         * A flag indicating whether the variation group is orderable.
         */
        orderable?: boolean;
        /**
         * The sales price of the variation group.
         */
        price?: number; // double
        /**
         * The id (SKU) of the variation group.
         */
        product_id?: string;
        /**
         * The actual variation attribute id - value pairs.
         */
        variation_values?: {
            [name: string]: string;
        };
    }
}

